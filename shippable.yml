---
resources:
  # Um objeto que representa este repositório
  ## Apenas no CI os repositórios são baixados automaticamente
  ## Em workflows, você precisa definir os repositórios e solicitar o download
  - name: qconsp-ops
    type: gitRepo
    integration: github
    versionTemplate:
      sourceName: fewbits/qconsp-ops
      branch: master

  # Este recurso representa nossa integração com a Google Cloud (basicamente credenciais)
  - name: google_cloud
    type: integration
    integration: google-cloud

  # Chave SSH que usaremos para nos autenticar com os servidores criados na Google
  - name: lowbit_key
    type: integration
    integration: lowbit-key

  # Este recurso representa nossa instância de Teste da Aplicação
  - name: vm_app_test_ip
    type: params
    versionTemplate:
      params:
        external_ip: "0.0.0.0"

  # Este recurso representa nossa instância de Produção da Aplicação
  - name: vm_app_prod_ip
    type: params
    versionTemplate:
      params:
        external_ip: "0.0.0.0"

  # Este recurso representa nossa instância de Produção do Site
  - name: vm_site_prod_ip
    type: params
    versionTemplate:
      params:
        external_ip: "0.0.0.0"

jobs:
  # Criar VM de Teste da Aplicação
  - name: vm_app_test_create
    type: runSh
    # dependencyMode: strict
    steps:
      # A imagem docker é um gatilho para esta atividade
      - IN: docker_image_app
        switch: on
      # A imagem base do Sistema Operacional também é um gatilho
      - IN: os_image
        switch: on
      # Vou usar este repositório
      - IN: qconsp-ops
        switch: off
      # Vou usar a integração com o Google Cloud
      - IN: google_cloud
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: vm_app_test_create
          runtime:
            options:
              env:
                - GCE_CREDENTIALS_FILE_PATH: "gcp_key.json"
                - service_name: app
                - service_env: test
          script:
            # Instalo dependências
            - pip install apache-libcloud backports.ssl_match_hostname
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "qconsp-ops")/ansible
            # Solicito informações de autenticação com a Google Cloud
            - echo $(shipctl get_integration_resource_field google_cloud JSON_key) > $GCE_CREDENTIALS_FILE_PATH
            # Chamo a automação
            - ansible-playbook gcp_instance_create.yml --extra-vars "service_name=${service_name} service_env=${service_env} os_image=${OS_IMAGE_VERSIONNAME}"
      # A saída deste job é o ambiente de Teste da Aplicação
      - OUT: vm_app_test_ip
        overwrite: true

  # Criar VM de Produção da Aplicação
  - name: vm_app_prod_create
    type: runSh
    steps:
      # Esta atividade depende de Testes de Performance bem sucedidos
      - IN: performance_test
        switch: on
      # Vou usar a imagem base do Sistema Operacional
      - IN: os_image
        switch: off
      # Vou usar este repositório
      - IN: qconsp-ops
        switch: off
      # Vou usar a integração com o Google Cloud
      - IN: google_cloud
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: vm_app_prod_create
          runtime:
            options:
              env:
                - GCE_CREDENTIALS_FILE_PATH: "gcp_key.json"
                - service_name: app
                - service_env: prod
          script:
            # Instalo dependências
            - pip install apache-libcloud backports.ssl_match_hostname
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "qconsp-ops")/ansible
            # Solicito informações de autenticação com a Google Cloud
            - echo $(shipctl get_integration_resource_field google_cloud JSON_key) > $GCE_CREDENTIALS_FILE_PATH
            # Chamo a automação
            - ansible-playbook gcp_instance_create.yml --extra-vars "service_name=${service_name} service_env=${service_env} os_image=${OS_IMAGE_VERSIONNAME}"
      # A saída é o ambiente de Produção da Aplicação
      - OUT: vm_app_prod_ip
        overwrite: true

  # Criar VM de Produção do Site
  - name: vm_site_prod_create
    type: runSh
    steps:
      # O gatilho é uma nova release do site
      - IN: docker_image_site
        switch: on
      # Outro gatilho é a imagem base do Sistema Operacional
      - IN: os_image
        switch: on
      # Vou usar este repositório
      - IN: qconsp-ops
        switch: off
      # Vou usar a integração com o Google Cloud
      - IN: google_cloud
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: vm_site_prod_create
          runtime:
            options:
              env:
                - GCE_CREDENTIALS_FILE_PATH: "gcp_key.json"
                - service_name: site
                - service_env: prod
          script:
            # Instalo dependências
            - pip install apache-libcloud backports.ssl_match_hostname
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "qconsp-ops")/ansible
            # Solicito informações de autenticação com a Google Cloud
            - echo $(shipctl get_integration_resource_field google_cloud JSON_key) > $GCE_CREDENTIALS_FILE_PATH
            # Chamo a automação
            - ansible-playbook gcp_instance_create.yml --extra-vars "service_name=${service_name} service_env=${service_env} os_image=${OS_IMAGE_VERSIONNAME}"
      # A saída é a instância de Produção do Site
      - OUT: vm_site_prod_ip
        overwrite: true

  # Configurar VM de Teste da Aplicação
  - name: vm_app_test_config
    type: runSh
    priority: 200
    # dependencyMode: strict
    steps:
      # O gatilho é a criação da VM de Testes
      - IN: vm_app_test_create
        switch: on
      # Vou usar este repositório
      - IN: qconsp-ops
        switch: off
      # Vou usar minha chave SSH
      - IN: lowbit_key
        switch: off
      # Vou usar a VM de teste
      - IN: vm_app_test_ip
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: vm_app_test_config
          runtime:
            options:
              env:
                - service_name: app
                - service_env: test
          script:
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "qconsp-ops")/ansible
            # Chamo a automação
            - ansible-playbook gcp_instance_config.yml --extra-vars "service_name=${service_name} service_env=${service_env} vm_ip=${external_ip} instance_key=${LOWBIT_KEY_PRIVATE_KEY_PATH}"

  # Configurar VM de Produção da Aplicação
  - name: vm_app_prod_config
    type: runSh
    priority: 200
    # dependencyMode: strict
    steps:
      # O gatilho é a criação da instância de Produção
      - IN: vm_app_prod_create
        switch: on
      # Vou usar este repositório
      - IN: qconsp-ops
        switch: off
      # Vou usar minha chave SSH
      - IN: lowbit_key
        switch: off
      # Vou usar a VM de Produção
      - IN: vm_app_prod_ip
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: vm_app_prod_config
          runtime:
            options:
              env:
                - service_name: app
                - service_env: prod
          script:
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "qconsp-ops")/ansible
            # Chamo a automação
            - ansible-playbook gcp_instance_config.yml --extra-vars "service_name=${service_name} service_env=${service_env} vm_ip=${external_ip} instance_key=${LOWBIT_KEY_PRIVATE_KEY_PATH}"

  # Configurar VM de Produção do Site
  - name: vm_site_prod_config
    type: runSh
    priority: 200
    # dependencyMode: strict
    steps:
      # O gatilho é a criação da instância de Produção
      - IN: vm_site_prod_create
        switch: on
      # Vou usar este repositório
      - IN: qconsp-ops
        switch: off
      # Vou usar minha chave SSH
      - IN: lowbit_key
        switch: off
      # Vou usar a VM de Produção
      - IN: vm_site_prod_ip
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: vm_site_prod_config
          runtime:
            options:
              env:
                - service_name: site
                - service_env: prod
          script:
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "qconsp-ops")/ansible
            # Chamo a automação
            - ansible-playbook gcp_instance_config.yml --extra-vars "service_name=${service_name} service_env=${service_env} vm_ip=${external_ip} instance_key=${LOWBIT_KEY_PRIVATE_KEY_PATH}"

  # Deploy da Aplicação no ambiente de Teste
  - name: vm_app_test_deploy
    type: runSh
    # dependencyMode: strict
    steps:
      # Para fazer o deploy, preciso do ambiente configurado
      - IN: vm_app_test_config
        switch: on
      # Preciso do IP da instância
      - IN: vm_app_test_ip
        switch: off
      # Preciso da versão do app
      - IN: docker_image_app
        switch: off
      # Vou usar este repositório
      - IN: qconsp-ops
        switch: off
      # Vou usar minha chave SSH
      - IN: lowbit_key
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: vm_app_test_deploy
          runtime:
            options:
              env:
                - service_name: app
                - service_env: test
                - service_internal_port: 3000
          script:
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "qconsp-ops")/ansible
            # Chamo a automação
            - ansible-playbook gcp_instance_deploy.yml --extra-vars "service_name=${service_name} service_env=${service_env} service_internal_port=${service_internal_port} vm_ip=${external_ip} service_version=${DOCKER_IMAGE_APP_VERSIONNAME} instance_key=${LOWBIT_KEY_PRIVATE_KEY_PATH}"

  # Deploy da Aplicação no ambiente de Produção
  - name: vm_app_prod_deploy
    type: runSh
    # dependencyMode: strict
    steps:
      # O gatilho é o ambiente configurado
      - IN: vm_app_prod_config
        switch: on
      # Vou usar este repositório
      - IN: qconsp-ops
        switch: off
      # Vou usar minha chave SSH
      - IN: lowbit_key
        switch: off
      # Preciso do IP do ambiente de Produção
      - IN: vm_app_prod_ip
        switch: off
      # Preciso da versão do app
      - IN: docker_image_app
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: vm_app_prod_deploy
          runtime:
            options:
              env:
                - service_name: app
                - service_env: prod
                - service_internal_port: 3000
          script:
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "qconsp-ops")/ansible
            # Chamo a automação
            - ansible-playbook gcp_instance_deploy.yml --extra-vars "service_name=${service_name} service_env=${service_env} service_internal_port=${service_internal_port} vm_ip=${external_ip} service_version=${DOCKER_IMAGE_APP_VERSIONNAME} instance_key=${LOWBIT_KEY_PRIVATE_KEY_PATH}"

  # Deploy do Site no ambiente de Produção
  - name: vm_site_prod_deploy
    type: runSh
    # dependencyMode: strict
    steps:
      # O gatilho é o ambiente configurado
      - IN: vm_site_prod_config
        switch: on
      # Vou usar este repositório
      - IN: qconsp-ops
        switch: off
      # Vou usar minha chave SSH
      - IN: lowbit_key
        switch: off
      # Preciso do IP do ambiente de Produção
      - IN: vm_site_prod_ip
        switch: off
      # Preciso da versão do app
      - IN: docker_image_site
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: vm_site_prod_deploy
          runtime:
            options:
              env:
                - service_name: site
                - service_env: prod
                - service_internal_port: 80
          script:
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "qconsp-ops")/ansible
            # Chamo a automação
            - ansible-playbook gcp_instance_deploy.yml --extra-vars "service_name=${service_name} service_env=${service_env} service_internal_port=${service_internal_port} vm_ip=${external_ip} service_version=${DOCKER_IMAGE_SITE_VERSIONNAME} instance_key=${LOWBIT_KEY_PRIVATE_KEY_PATH}"

  # Deleta a VM de Testes da Aplicação
  - name: vm_app_test_destroy
    type: runSh
    # dependencyMode: strict
    steps:
      # O gatilho para esta atividade é um Deploy em Produção
      - IN: vm_app_prod_deploy
        switch: on
      # Vou usar este repositório
      - IN: qconsp-ops
        switch: off
      # Vou usar a integração com o Google Cloud
      - IN: google_cloud
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: vm_app_test_destroy
          runtime:
            options:
              env:
                - GCE_CREDENTIALS_FILE_PATH: "gcp_key.json"
                - service_name: app
                - service_env: test
          script:
            # Instalo dependências
            - pip install apache-libcloud backports.ssl_match_hostname
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "qconsp-ops")/ansible
            # Solicito informações de autenticação com a Google Cloud
            - echo $(shipctl get_integration_resource_field google_cloud JSON_key) > $GCE_CREDENTIALS_FILE_PATH
            # Chamo a automação
            - ansible-playbook gcp_instance_destroy.yml --extra-vars "service_name=${service_name} service_env=${service_env}"
