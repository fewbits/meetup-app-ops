---
resources:
  - name: meetup-app-ops
    type: gitRepo
    integration: github
    versionTemplate:
      sourceName: fewbits/meetup-app-ops
      branch: master

  - name: google_cloud
    type: integration
    integration: google-cloud

  - name: cloudflare
    type: integration
    integration: cloudflare

  # - name: vm
  #   type: params
  #   versionTemplate:
  #     params:
  #       SEED: initial_version

jobs:
  - name: deploy_test
    type: runSh
    steps:
      - IN: meetup-app-ops
        switch: on
      - IN: google_cloud
        switch: off
      - IN: cloudflare
        switch: off
      - TASK:
          name: deploy_test
          runtime:
            options:
              env:
          #       - STATE_RES_NAME: "vm"
          #       - gce_name: "meetup_test"
          #       - gce_zone: "us-east1-d"
          #       - gce_machine_type: "n1-standard-1"
          #       - gce_image: "ubuntu-1604-xenial-v20180522"
          #       - gce_tag_Role: "demo-machines"
          #       - gce_count: 1
          #       - gce_volume_size: 30
          #       - GCE_PROJECT: "My First Project"
          #       - GCE_EMAIL: "lowbit@lowbit.com.br"
                - GCE_CREDENTIALS_FILE_PATH: "gcp_key.json"
                - meetup_env: test
          script:
            - pip install apache-libcloud backports.ssl_match_hostname
            - pushd $(shipctl get_resource_state "meetup-app-ops")/ansible
            - echo $(shipctl get_integration_resource_field google_cloud JSON_key) > $GCE_CREDENTIALS_FILE_PATH
            # - shipctl replace variables.yml inventory/gce.ini
            - ansible-playbook gcp_deploy.yml --extra-vars "meetup_env=${meetup_env} cloudflare_email=${cloudflare_email} cloudflare_api=${cloudflare_api}"
      # - OUT: vm
      #   overwrite: true

# resources:
#   - name: google_credentials
#     type: cliConfig
#     integration: google-cloud
#     versionTemplate:
#       region: us-east1

#   - name: google_cluster
#     type: cluster
#     integration: google-cloud
#     versionTemplate:
#       sourceName: tbd
#       region: us-east1-d

#   - name: docker_options
#     type: dockerOptions
#     versionTemplate:
#       portMappings:
#         - 80:3000

#   - name: docker_parameters
#     type: params
#     versionTemplate:
#       params:
#         ENVIRONMENT: test

#   - name: lb
#     type: loadBalancer
#     integration: google-cloud
#     pointer:
#       sourceName: load_balancer
#       method: LoadBalancer
#       namespace: shippable
#       clusterName: meetup
#       region: us-east1-d
#     version:
#       ports:
#         - name: http
#           protocol: TCP
#           port: 80
#       selector:
#         name: manifest_create
#         jobName: deploy

# jobs:
#   - name: google_cluster_create
#     type: runSh
#     steps:
#       - IN: manifest_create
#       - IN: google_credentials
#         switch: on
#       - TASK:
#           name: create_cluster
#           runtime:
#             options:
#               env:
#                 - cluster_name: meetup
#                 - cluster_zone: us-east1-d
#                 - machine_type: n1-standard-1
#                 - machine_count: 3
#                 - volume_size: 30
#           script:
#             - |
#                 # check if the cluster already exists on GKE
#                 response=$(gcloud container clusters describe $cluster_name --zone $cluster_zone || echo "ClusterNotFound")
#                 if [[ $response = "ClusterNotFound" ]]
#                   then
#                     echo "cluster not found, creating cluster"
#                     gcloud container clusters create $cluster_name --num-nodes=$machine_count --machine-type=$machine_type --disk-size=$volume_size --zone=$cluster_zone
#                   else
#                     echo "cluster already exists, skipping creating cluster"
#                 fi
#       - OUT: google_cluster
#         overwrite: true
#     on_success:
#       script:
#         - shipctl put_resource_state_multi google_cluster "versionName=$cluster_name" "sourceName=$cluster_name" "region=$cluster_zone"

#   - name: lb_create
#     type: provision
#     steps:
#       - IN: lb
#       - IN: google_cluster

#   - name: manifest_create
#     type: manifest
#     steps:
#      - IN: meetup-assembly-lines_img_dh
#      - IN: docker_options
#      - IN: docker_parameters

#   - name: deploy
#     type: deploy
#     steps:
#       - IN: google_cluster_create
#       - IN: manifest_create
#       - IN: google_cluster
#       - TASK: managed
#         deployMethod: replace
