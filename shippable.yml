---
resources:
  # Um objeto que representa este repositório
  ## Apenas no CI os repositórios são baixados automaticamente
  ## Em workflows, você precisa definir os repositórios e solicitar o download
  - name: meetup-app-ops
    type: gitRepo
    integration: github
    versionTemplate:
      sourceName: fewbits/meetup-app-ops
      branch: master

  # Este recurso representa nossa integração com a Google Cloud (basicamente credenciais)
  - name: google_cloud
    type: integration
    integration: google-cloud

  # Chave SSH que usaremos para nos autenticar com os servidores criados na Google
  - name: lowbit_key
    type: integration
    integration: lowbit-key

  # Este recurso representa nossa instância de Teste
  - name: vm_test
    type: params
    versionTemplate:
      params:
        external_ip: "0.0.0.0"

  # Este recurso representa nossa instância de Produção
  - name: vm_prod
    type: params
    versionTemplate:
      params:
        external_ip: "0.0.0.0"

jobs:
  # Criar VM de Teste
  - name: vm_test_create
    type: runSh
    # dependencyMode: strict
    steps:
      # A imagem docker é um gatilho para esta atividade
      - IN: docker_image
        switch: on
      # A imagem base de Sistema Operacional também é um gatilho
      - IN: os_image_version
        switch: on
      # Vou usar este repositório
      - IN: meetup-app-ops
        switch: on
      # Vou usar a integração com o Google Cloud
      - IN: google_cloud
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: vm_test_create
          runtime:
            options:
              env:
                - GCE_CREDENTIALS_FILE_PATH: "gcp_key.json"
                - meetup_env: test
          script:
            # Instalo dependências
            - pip install apache-libcloud backports.ssl_match_hostname
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "meetup-app-ops")/ansible
            # Solicito informações de autenticação com a Google Cloud
            - echo $(shipctl get_integration_resource_field google_cloud JSON_key) > $GCE_CREDENTIALS_FILE_PATH
            # Chamo a automação
            - env
            # - ansible-playbook gcp_instance_create.yml --extra-vars "meetup_env=${meetup_env} os_image_version=${OS_IMAGE_VERSION_VERSIONNAME}"
      - OUT: vm_test
        overwrite: true

  # Configurar VM de Teste
  - name: vm_test_config
    type: runSh
    dependencyMode: strict
    steps:
      # O gatilho é a criação da VM de Testes
      - IN: vm_test_create
        switch: on
      # Vou usar este repositório
      - IN: meetup-app-ops
        switch: off
      # Vou usar minha chave SSH
      - IN: lowbit_key
        switch: off
      # Vou usar a VM de teste
      - IN: vm_test
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: vm_test_config
          runtime:
            options:
              env:
                - meetup_env: test
          script:
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "meetup-app-ops")/ansible
            # Chamo a automação
            - ansible-playbook gcp_instance_config.yml --extra-vars "meetup_env=${meetup_env} meetup_vm_ip=${external_ip} instance_key=${LOWBIT_KEY_PRIVATE_KEY_PATH}"

  # Deploy em Teste
  - name: vm_test_deploy
    type: runSh
    dependencyMode: strict
    steps:
      # Para fazer o deploy, preciso do ambiente configurado
      - IN: vm_test_config
        switch: on
      # E preciso do DNS configurado
      - IN: dns_test
        switch: on
      # Por último, precisamos da versão do app de deploy
      - IN: docker_image
        switch: off
      # Vou usar este repositório
      - IN: meetup-app-ops
        switch: off
      # Vou usar minha chave SSH
      - IN: lowbit_key
        switch: off
      # Precisamos do IP da instância
      - IN: vm_test
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: vm_test_deploy
          runtime:
            options:
              env:
                - meetup_env: test
          script:
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "meetup-app-ops")/ansible
            # Chamo a automação
            - ansible-playbook gcp_instance_deploy.yml --extra-vars "meetup_env=${meetup_env} meetup_vm_ip=${external_ip} meetup_version=${DOCKER_IMAGE_VERSIONNAME} instance_key=${LOWBIT_KEY_PRIVATE_KEY_PATH}"

  # Criar VM de Produção
  - name: vm_prod_create
    type: runSh
    steps:
      # Esta atividade depende de Testes de Performance bem sucedidos
      - IN: performance_test
        switch: on
      # Vou usar este repositório
      - IN: meetup-app-ops
        switch: off
      # Vou usar a integração com o Google Cloud
      - IN: google_cloud
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: vm_test_create
          runtime:
            options:
              env:
                - GCE_CREDENTIALS_FILE_PATH: "gcp_key.json"
                - meetup_env: prod
          script:
            # Instalo dependências
            - pip install apache-libcloud backports.ssl_match_hostname
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "meetup-app-ops")/ansible
            # Solicito informações de autenticação com a Google Cloud
            - echo $(shipctl get_integration_resource_field google_cloud JSON_key) > $GCE_CREDENTIALS_FILE_PATH
            # Chamo a automação
            - ansible-playbook gcp_instance_create.yml --extra-vars "meetup_env=${meetup_env}"
      - OUT: vm_prod
        overwrite: true

  # Configurar VM de Produção
  - name: vm_prod_config
    type: runSh
    dependencyMode: strict
    steps:
      # Vou usar este repositório
      - IN: meetup-app-ops
        switch: off
      # Vou usar minha chave SSH
      - IN: lowbit_key
        switch: off
      # Vou usar a VM de Produção (ela inclusive é um gatilho para esta atividade!)
      - IN: vm_prod
        switch: on
      # Agora é a tarefa...
      - TASK:
          name: vm_prod_config
          runtime:
            options:
              env:
                - meetup_env: prod
          script:
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "meetup-app-ops")/ansible
            # Chamo a automação
            - ansible-playbook gcp_instance_config.yml --extra-vars "meetup_env=${meetup_env} meetup_vm_ip=${external_ip} instance_key=${LOWBIT_KEY_PRIVATE_KEY_PATH}"

  # Deploy em Produção
  - name: vm_prod_deploy
    type: runSh
    dependencyMode: strict
    steps:
      # O gatilho é um teste de performance bem sucedido
      - IN: performance_test
        switch: on
      # Vou usar este repositório
      - IN: meetup-app-ops
        switch: off
      # Vou usar minha chave SSH
      - IN: lowbit_key
        switch: off
      # Precisamos do IP da instância
      - IN: vm_prod
        switch: off
      # Para fazer o deploy, preciso do ambiente configurado
      - IN: vm_prod_config
        switch: on
      # Preciso do DNS de Produção configurado
      - IN: dns_prod
        switch: on
      # Também precisamos da versão do app de deploy
      - IN: docker_image
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: vm_prod_deploy
          runtime:
            options:
              env:
                - meetup_env: prod
          script:
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "meetup-app-ops")/ansible
            # Chamo a automação
            - ansible-playbook gcp_instance_deploy.yml --extra-vars "meetup_env=${meetup_env} meetup_vm_ip=${external_ip} meetup_version=${DOCKER_IMAGE_VERSIONNAME} instance_key=${LOWBIT_KEY_PRIVATE_KEY_PATH}"

  # Deleta a VM de Testes
  - name: vm_test_destroy
    type: runSh
    dependencyMode: strict
    steps:
      # O gatilho para esta atividade é um Teste de Performance bem sucedido
      - IN: vm_prod_deploy
        switch: on
      # Vou usar este repositório
      - IN: meetup-app-ops
        switch: off
      # Vou usar a integração com o Google Cloud
      - IN: google_cloud
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: vm_test_destroy
          runtime:
            options:
              env:
                - GCE_CREDENTIALS_FILE_PATH: "gcp_key.json"
                - meetup_env: test
          script:
            # Instalo dependências
            - pip install apache-libcloud backports.ssl_match_hostname
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "meetup-app-ops")/ansible
            # Solicito informações de autenticação com a Google Cloud
            - echo $(shipctl get_integration_resource_field google_cloud JSON_key) > $GCE_CREDENTIALS_FILE_PATH
            # Chamo a automação
            - ansible-playbook gcp_instance_destroy.yml --extra-vars "meetup_env=${meetup_env}"
